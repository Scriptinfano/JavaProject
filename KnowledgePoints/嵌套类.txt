一、什么是嵌套类及内部类
 按照定义的位置分为三种：
  1、在外部类中直接定义
  2、在外部类方法中定义
  3、匿名的内部类
 按照性质划分可分为两种
  1、静态内部类
  2、非静态内部类

二、几种内部类的共性
 1、内部类仍然是一个独立的类，在编译之后会内部类会被编译成独立的.class文件，但是前面冠以外部类的类命和$符号。
 2、内部类不能用普通的方式访问。内部类是外部类的一个成员，因此内部类可以自由地访问外部类的成员变量，无论是否是private的。

三、成员内部类
 1、成员内部类调用外部类非静态方法: Father.this.func();
 2、作为外部类的成员可以被四中权限符修饰
 3、静态内部类方法可以随意访问外部类的任意权限的静态成员和静态方法
 4、外部类只能直接调用内部类的静态方法，外部类要访问内部类的成员和方法只能通过内部类对象来调用
 5、只有私有的内部类无法在类外实例化，注意在其他类中实例化静态内部类对象和非静态内部类对象是不同的：
  实例化内部静态类 Father.Inner inner=new Father.Inner();
  实例化内部非静态类 Father father=new Father();
                  Father.Inner inner= father.new Inner();
 6、在外部类成员函数中访问内部类的成员必须先实例化内部类对象，然后通过对象名.成员名的方式访问

class testResources.Person {

    private static boolean isAlive = true;
    private String name;
    private int age;

    public static void func() {
        System.out.println("调用了外部类的静态方法");
    }

    //私有的内部静态类不允许在其他类中实例化
    private static class Brain {
        private final int BrainSize = 5123;
        public int IQ = 80;

        public Brain(int IQ) {
            this.IQ = IQ;
        }

        public void display() {
            //静态内部类方法可以随意访问外部类的任意权限的静态成员和静态方法
            //System.out.println(id);//不能直接访问外部类的非静态成员
            System.out.println("调用内部类的成员函数");
            System.out.println("是否活着" + isAlive);//只能直接访问外部类的静态成员
            func();//调用外部类的静态方法
        }

        private void func() {
            System.out.println("调用了内部类的非静态私有方法");
        }

        public void func2() {
            System.out.println("调用了内部类的非静态公有方法");
        }

        public static void func3() {
            System.out.println("调用了静态内部类的静态公有方法");
        }
    }

    static class Hand {

    }

    public void printInfo() {

        Brain brain = new Brain(150);
        //外部类方法不能直接访问内部类的任何成员
        //System.out.println(mail);//不可访问
        //System.out.println(address);//不可访问
        //要访问内部类的成员必须先实例化内部类对象，然后通过对象名.成员名的方式访问
        System.out.println("脑容量：" + brain.BrainSize);//内部类的私有成员和公有成员都可以通过对象直接访问
        System.out.println("智商：" + brain.IQ);
        brain.display();
        Brain.func3();//外部类方法可以调用内部静态类中的静态方法
    }


    public void outerMethod() {
        System.out.println("在外部类方法中定义内部类");
        class InOuterMethod {

        }
    }

    public testResources.Person() {
        System.out.println("在外部类构造器中定义内部类");
        class InOuterConstructor {
            public int y = 10;
            private int z = 9;
            int m = 5;
        }
    }

    //定义成员内部类
    class Leg {
    }

}
public class TestMain {
    public static void main(String[] args) {
        testResources.Person man = new testResources.Person();
        man.printInfo();
        testResources.Person.Leg son = man.new Leg();//在其他类方法中实例化非静态内部类
        testResources.Person.Hand hand = new testResources.Person.Hand();//在其他类方法中实例化静态内部类
    }
}


三、非静态嵌套类
public class Outer {
        int outer_x = 100;
　　　　class Inner{
　　　　　　public int y = 10;
　　　　　　private int z = 9;
　　　　　　int m = 5;
　　　　　　public void display(){
　　　　　　　　System.out.println("display outer_x:"+ outer_x);
　　　　　　}
　　　　　　private void display2(){
　　　　　　　　System.out.println("display outer_x:"+ outer_x);
　　　　　　}
　　　　}
　　　　void test(){
　　　　　　Inner inner = new Inner();
　　　　　　inner.display();
　　　　　　inner.display2();
　　　　　　//System.out.println("Inner y:" + y);//不能访问内部内变量
　　　　　　System.out.println("Inner y:" + inner.y);//可以访问
　　　　　　System.out.println("Inner z:" + inner.z);//可以访问
　　　　　　System.out.println("Inner m:" + inner.m);//可以访问
　　　　　　InnerTwo innerTwo = new InnerTwo();
　　　　　　innerTwo.show();
　　　　}
　　　　class InnerTwo{
　　　　　　Inner innerx = new Inner();
　　　　　　public void show(){
　　　　　　　　//System.out.println(y);//不可访问Innter的y成员
　　　　　　　　//System.out.println(Inner.y);//不可直接访问Inner的任何成员和方法
　　　　　　　　innerx.display();//可以访问
　　　　　　　　innerx.display2();//可以访问
　　　　　　　　System.out.println(innerx.y);//可以访问
　　　　　　　　System.out.println(innerx.z);//可以访问
　　　　　　　　System.out.println(innerx.m);//可以访问
　　　　　　}
　　　　}
　　　　public static void main(String args[]){
　　　　　　Outer outer = new Outer();
　　　　　　outer.test();
　　　　}
}
四、方法内部类
A、方法内部类只能在定义该内部类的方法内实例化，不可以在此方法外对其实例化。
B、方法内部类对象不能使用该内部类所在方法的非final局部变量。
 因为方法的局部变量位于栈上，只存在于该方法的生命期内。当一个方法结束，其栈结构被删除，局部变量被销毁，但是该方法结束之后，
 在方法内创建的内部类对象可能仍然存在于堆中，如果对它的引用被传递到其他某些代码，会造成局部变量的存活期和方法内部类对象的
 不一样长，所以当内部类再使用局部变量时，局部变量可能已经释放了，所以不允许方法内的内部类对象使用方法中定义的局部非final变量
下面是完整的例子：
class Outer {
    public void doSomething(){
        final int a =10;
        class Inner{
            public void seeOuter(){
                System.out.println(a);
            }
        }
        Inner in = new Inner();
        in.seeOuter();
    }
    public static void main(String[] args) {
        Outer out = new Outer();
        out.doSomething();
    }
}

五、匿名内部类
匿名内部类即没有名字的内部类，如我们在临时创建新的线程时,经常会这么写:
new Thread(new Runnable(){
   @Override
   public void run(){
     // do something
   }
 }
 );
 关于匿名内部类的更多内容详见：https://blog.csdn.net/hguisu/article/details/7270086