Object方法equals()方法和==运算符的区别
 一、本质不相同不同
   1、equals()：是超类Object中的方法。
   2、==：是操作符。

 二、比较的对象不同
   1、equals()：比较继承于Object类的java定义的类时，比的是内容是否相同；比较继承于Object类的自定义的没有重写equals方法的类时，比较的是对象的地址
   2、==：用于比较引用和比较基本数据类型时具有不同的功能，具体如下：
    （1）、基础数据类型：比较的是他们的值是否相等，比如两个int类型的变量，比较的是变量的值是否一样。
    （2）、引用数据类型：比较的是引用的地址是否相同，比如说新建了两个User对象，比较的是两个User的地址是否一样。

 三、运行速度不同：equals()没有==运行速度快。
  扩展资料：
    equals()和==的源码定义：
    public boolean equals(Object obj) {
    return (this == obj);
    }
    由equals的源码可以看出这里定义的equals与==是等效的（Object类中的equals和==没什么区别），不同的原因就在于有些类（像String、Integer等类）对equals进行了重写。
    但是没有对equals进行重写的类就只能从Object类中继承equals方法，其equals方法与==就也是等效的。

  对equals重新需要注意五点：
    1、自反性：对任意引用值X，x.equals(x)的返回值一定为true；
    2、对称性：对于任何引用值x,y,当且仅当y.equals(x)返回值为true时，x.equals(y)的返回值一定为true；
    3、传递性：如果x.equals(y)=true, y.equals(z)=true,则x.equals(z)=true ；
    4、一致性：如果参与比较的对象没任何改变，则对象比较的结果也不应该有任何改变；
    5、非空性：任何非空的引用值X，x.equals(null)的返回值一定为false 。

 对==的说明：
   == 比较的是变量(栈)内存中存放的对象的(堆)内存地址，用来判断两个对象的地址是否相同，即是否是指相同一个对象。比较的是真正意义上的指针操作。
   且两边的操作数必须是同一类型的（可以是父子类之间）才能编译通过。

 如何重写equals()方法比较自定义对象的内容是否相同：
   @Override
   public boolean equals(Object obj) {
        if(this==obj)return true;
        if (obj instanceof Sheep) {
            Sheep sheep = (Sheep) obj;
            return sheep.age == this.age && sheep.name == this.name;
        } else return false;
    }
    重写equals方法是有一套固定的写法的，先比较引用的地址是否相同，如果相同则内容必然相同，
    返回true即可，然后比较传入的基类引用所指向的对象是否是重写该方法的类的对象，如果是然后再
    比较内容是否相同，如果不是则直接返回false。无需判断传入的基类引用是否为null，因为执行
    obj instanceof BaseClass时如果obj为null是可以返回false的

 注意用==比较两个String对象的内容时，内容相同返回true的原因不是因为比较了两个String对象
 的内容，还是比较了地址，String对象不通过new的方式声明时是存放在常量池中，常量池的特点是
 如果两个变量的值相同，那么第二个引用仍然指向第一个引用的内存空间，所以下面的两个String比较的
 还是地址：
 String s1="hello";
 String s2="hello";
 String s3=new String("hello");
 String s4=new String("hello");
 System.out.println(s1==s2);//返回的是true
 System.out.println(s3==s4);//返回的是false
 String对象很特殊，在java中大部分类对象都会存在堆空间中，而String可以放在常量池中





